#!/bin/bash
## This file is part of the Xemu project: https://github.com/lgblgblgb/xemu
## Collection of various emulators of some 8 bits machines using SDL2 library.
##
## Copyright (C)2016-2020 LGB (Gábor Lénárt) <lgblgblgb@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

echo "*** Running xemu-configure ***"

###########################################################
# Check some basic common UNIX utilities if work, we need #
###########################################################

if [ "`echo "testSTRSTRing" | sed -n 's/STR/RTS/gp'`" != "testRTSRTSing" ]; then
	echo "FATAL: UNIX utility 'sed' does not seem to work or cannot be found" >&2
	exit 1
fi
if [ \
	"`echo ez=az=amaz | cut -f1 -d=`" != "ez" -o \
	"`echo ez=az=amaz | cut -f2- -d=`" != "az=amaz" -o \
	"`echo ezaz | cut -f1 -d=`" != "ezaz" -o \
	"`echo ezaz | cut -f2- -d=`" != "ezaz" \
]; then
	echo "FATAL: UNIX utility 'cut' does not seem to work or cannot be found" >&2
	exit 1
fi
if [ "`dirname /something`" != "/" ]; then
	echo "FATAL: UNIX utility 'dirname' does not seem to work or cannot be found" >&2
	exit 1
fi
if [ "`pwd`" = "" ]; then
	echo "FATAL: UNIX utility 'pwd' does not seem to work or cannot be found" >&2
	exit 1
fi
if [ "`uname -a`" = "" ]; then
	echo "FATAL: UNIX utility 'uname' does not seem to work or cannot be found" >&2
	exit 1
fi
if [ "`date`" = "" ]; then
	echo "FATAL: UNIX utility 'date' does not seem to work or cannot be found" >&2
	exit 1
fi

#####################################################
# Evaluate given parameters to the configure script #
#####################################################

ARCH=""
CC=""
WINDRES=""
SDL2_CONFIG=""
PKG_CONFIG=""
while [ "$1" != "" ] ; do
	var="`echo $1 | cut -f1 -d=`"
	val="`echo $1 | cut -f2- -d=`"
	case "$var" in
		"--arch")
			ARCH=$val
			;;
		"--with-cc")
			CC=$val
			;;
		"--with-windres")
			WINDRES=$val
			;;
		"--with-sdl2")
			SDL2_CONFIG=$val
			;;
		"--with-pkg-config")
			PKG_CONFIG=$val
			;;
		"--help")
			cat <<EOF

Usage:

	--arch=ARCH-NAME	Set make architecture name, COMPULSORY.
				Unless cross-compile, you should say: native
				Other common values: win32 and win64 and
				html (for Emscripten html/JS output)

	--with-cc=CC		Sets the name (or path+name) of the C compiler.
				Must be a compiler understanding gcc style
				options (eg: gcc, clang), for Windows, MingW is
				needed (Xemu uses POSIX functions implemented
				by MingW even when targeted for Windows, to
				reduce the windows-madness) running on eg Linux
				(even in WSL) or natively on Windows, eg MSYS2.

	--with-windres=WINDRES	Sets the name (or path+name) of the WINDRES
				compiler. Only make sense if cross compile for
				Windows or native target is Windows.

	--with-sdl2=CFG-SCRIPT	Sets the name (or path+name) of the sdl2-config
				script to be used. It must be at least SDL
				2.0.4.

	--with-pkg-config=PKG	Sets the name (or path+name) of the pkg-config
				script used to find GTK3 for compilation.
				Note: on Mac and Windows, GTK is not needed for
				GUI, the native GUI API will be used on those.
				Though you can force also compile GTK3 if you
				use this parameter with working GTK3 installed.

In case of missing --with... options defaults are used for the given "ARCH"
selected by the --arch=... option. Note, that you need to "pair" some settings,
like windres and cc should be both the same mingw and architecture (ie 32 or
64 bit) also the SDL2's config script given.
EOF
			exit 1
			;;
		*)
			echo "ERROR: Unknown command line directive: $var" >&2
			echo "To get help, use --help"
			exit 1
			;;
	esac
	if [ "$val" = "$var" -o "$val" = "" ]; then
		echo "ERROR: Empty parameter for argument $var" >&2
		exit 1
	fi
	shift
done

#########################################
# Check "ARCH" and set _default_ values #
#########################################

echo -n "Specified make ARCH to use: "
if [ "$ARCH" = "native" ]; then
	echo "$ARCH (intended for native target)"
	CC_default=cc
	WINDRES_default=windres
	SDL2_CONFIG_default=sdl2-config
elif [ "$ARCH" = "win32" ]; then
	echo "$ARCH (intended for WIN32 cross-compilation on UNIX)"
	CC_default=i686-w64-mingw32-gcc
	WINDRES_default=i686-w64-mingw32-windres
	SDL2_CONFIG_default=i686-w64-mingw32-sdl2-config
elif [ "$ARCH" = "win64" ]; then
	echo "$ARCH (intended for WIN64 cross-compilation on UNIX)"
	CC_default=x86_64-w64-mingw32-gcc
	WINDRES_default=x86_64-w64-mingw32-windres
	SDL2_CONFIG_default=x86_64-w64-mingw32-sdl2-config
elif [ "$ARCH" = "html" ]; then
	echo "$ARCH (intended for HTML/JS cross-compilation on UNIX)"
	CC_default=emcc
	WINDRES_default=
	SDL2_CONFIG_default=internal
elif [ "$ARCH" = "" ]; then
	echo "UNSPECIFIED"
	echo "Error, no ARCH variable passed to the $0 script. Do not forget to use the --arch=... parameter." >&2
	exit 1
else
	echo "UNKNOWN"
	echo "Error, unknown ARCH ($ARCH) was specified to the $0 script" >&2
	exit 1
fi
PKG_CONFIG_default=pkg-config

##########################################################################
# Work out our current directory, project root, temporary & result files #
##########################################################################

 SRC="build/objs/configure--script--$ARCH--test.c"
COUT="build/objs/configure--script--$ARCH--test.out"
CERR="build/objs/configure--script--$ARCH--test.err"
 OBJ="build/objs/configure--script--$ARCH--test.o"

  OUTPUT_MAKEFILE="build/configure/config-$ARCH.make"
OUTPUT_HEADERFILE="build/configure/config-$ARCH.h"

finalexit() {
	rm -f $SRC $COUT $CERR $OBJ $OUTPUT_MAKEFILE $OUTPUT_HEADERFILE
	echo "*** xemu-configure has FAILED ***" >&2
	exit 1
}

failed() {
	echo "ERROR"
	echo "*** Error message ***" >&2
	cat $CERR >&2
	finalexit
	exit 1
}

echo "Temporary files: $SRC $COUT $CERR $OBJ"
echo "Final files: $OUTPUT_MAKEFILE $OUTPUT_HEADERFILE"
echo "Current directory: `pwd`"
echo "Configure executable: $0"
echo -n "Getting project root absolute path ... "
cd `dirname $0` || finalexit
cd .. || finalexit
cd .. || finalexit
PROJECT_ROOT="`pwd`"
echo "$PROJECT_ROOT"
#if [ ! -d "$PROJECT_ROOT" ]; then
#	echo "Could not determine project root." >&2
#	finalexit
#fi
if [ ! -s build/configure/configure ]; then
	echo "Cannot find myself" >&2
	finalexit
fi
if [ ! -d build/objs ]; then
	echo "Cannot found the objs directory" >&2
	finalexit
fi

rm -f $SRC $COUT $CERR $OBJ $OUTPUT_MAKEFILE $OUTPUT_HEADERFILE || finalexit
touch $SRC $COUT $CERR $OBJ $OUTPUT_MAKEFILE $OUTPUT_HEADERFILE || finalexit

############################################################
# Use defaults, if no option is given for certain settings #
############################################################

if [ "$CC" = "" ]; then
	CC=$CC_default
	echo "Setting CC to default: $CC"
else
	echo "Using specified CC: $CC"
fi
if [ "$WINDRES" = "" ]; then
	WINDRES=$WINDRES_default
	echo "Setting WINDRES to default: $WINDRES"
else
	echo "Using specified WINDRES: $WINDRES"
fi
if [ "$SDL2_CONFIG" = "" ]; then
	SDL2_CONFIG=$SDL2_CONFIG_default
	echo "Setting SDL2_CONFIG to default: $SDL2_CONFIG"
else
	echo "Using specified SDL2_CONFIG: $SDL2_CONFIG"
fi
if [ "$PKG_CONFIG" = "" ] ;then
	PKG_CONFIG_GIVEN=N
	PKG_CONFIG=$PKG_CONFIG_default
	echo "Setting PKG_CONFIG to default: $PKG_CONFIG"
else
	PKG_CONFIG_GIVEN=Y
	echo "Using specified PKG_CONFIG: $PKG_CONFIG"
fi

#######################################
# Start to construct our output files #
#######################################

cat >> $OUTPUT_HEADERFILE <<EOF
/* This file is generated by xemu-configure. Do not edit by hand! */
#ifdef XEMU_LOW_LEVEL_CONFIG_H_INCLUDED
#	error "config-*.h cannot be included more times"
#endif
#define XEMU_LOW_LEVEL_CONFIG_H_INCLUDED
#include "xemu/arch-sys.h"
#define XEMU_CONFIGURATION_PENDING
EOF
echo "# This file is generated by xemu-configure. Do not edit by hand!" >> $OUTPUT_MAKEFILE

BUILD_OS="`uname 2>$CERR`"
echo "Build system: $BUILD_OS"
if [ "$BUILD_OS" = "" ]; then
	echo "ERROR: uname command has no answer" >&2
	cat $CERR
	finalexit
fi
echo "#define XEMU_BUILD_OS \"$BUILD_OS\"" >> $OUTPUT_HEADERFILE

#####################################
# Very basic test of the C compiler #
#####################################

echo "int main ( void ) { return 0; }" > $SRC
echo -n "Test if $CC can create object file ... "
rm -f $OBJ
$CC -Wall -o $OBJ -c $SRC > $COUT 2> $CERR
ret=$?
if [ "$ret" != "0" -o ! -s $OBJ ]; then
	echo "NO"
	echo "Error message was:"
	cat $CERR | sed 's/^/> /g' >&2
	echo "Cannot found object file generated or compilation failed or $CC cannot be found" >&2
	finalexit
else
	echo "OK"
fi

echo "Compiler version: `$CC --version | head -n 1`"

echo -n "Test if $CC can create executable ... "
rm -f $OBJ
$CC -Wall -o $OBJ $SRC > $COUT 2> $CERR || failed
if [ ! -f $OBJ ]; then
	echo "NO"
	echo "Cannot find output file generated" >&2
	finalexit
fi
echo "OK"

echo "CONFIG_CC=$CC" >> $OUTPUT_MAKEFILE

##############################
# Test compiler flag support #
##############################

echo -n "Test $CC flag support"
for a in \
	    FALIGN_LOOPS_SUPPORTED_BY_CC:-falign-loops=16: \
	FALIGN_FUNCTIONS_SUPPORTED_BY_CC:-falign-functions=16: \
	      FNO_COMMON_SUPPORTED_BY_CC:-fno-common:essential \
	            WALL_SUPPORTED_BY_CC:-Wall:essential \
	      FFAST_MATH_SUPPORTED_BY_CC:-ffast-math: \
	           OFAST_SUPPORTED_BY_CC:-Ofast: \
	              O3_SUPPORTED_BY_CC:-O3:essential \
	       STD_GNU11_SUPPORTED_BY_CC:-std=gnu11: \
	         STD_C11_SUPPORTED_BY_CC:-std=c11:essential \
	            PIPE_SUPPORTED_BY_CC:-pipe: \
  		      O0_SUPPORTED_BY_CC:-O0: \
		       G_SUPPORTED_BY_CC:-g: \
		    FLTO_SUPPORTED_BY_CC:-flto
do
	b="`echo $a | cut -f1 -d:`"
	c="`echo $a | cut -f2 -d:`"
	d="`echo $c | cut -f3 -d:`"
	echo -n " ... $c "
	rm -f $OBJ
	$CC $c -o $OBJ -c $SRC > $COUT 2> $CERR
	ret=$?
	if [ "$ret" != "0" -o -s $CERR -o ! -s $OBJ ]; then
		echo -n "[NO]"
		if [ "$d" = "essential" ]; then
			echo
			echo "ERROR: $CC does not support essential flag for this project: $c" >&2
			finalexit
		fi
		echo "# $b is False!" >> $OUTPUT_MAKEFILE
		eval $b=N
	else
		echo -n "[YES]"
		echo "$b = 1" >> $OUTPUT_MAKEFILE
		eval $b=Y
	fi
done
echo
CFLAGS="-Wall -fno-common "
CFLAGS_OPT=""
CFLAGS_DEBUG=""
CFLAGS_LINK="-fno-common "
CFLAGS_OPT_RELEASE=""
if [ $FLTO_SUPPORTED_BY_CC = Y ]; then
	#CFLAGS_OPT="$CFLAGS_OPT-flto "
	#CFLAGS_LINK="$CFLAGS_LINK-flto "
	CFLAGS_OPT_RELEASE="$CFLAGS_OPT_RELEASE-flto"
fi
if [ $O0_SUPPORTED_BY_CC = Y ]; then
	CFLAGS_DEBUG="$CFLAGS_DEBUG-O0 "
fi
if [ $G_SUPPORTED_BY_CC = Y ]; then
	CFLAGS_DEBUG="$CFLAGS_DEBUG-g "
fi
if [ $STD_GNU11_SUPPORTED_BY_CC = Y ]; then
	CFLAGS="$CFLAGS-std=gnu11 "
else
	CFLAGS="$CFLAGS-std=c11 "
fi
if [ $OFAST_SUPPORTED_BY_CC = Y ]; then
	CFLAGS_OPT="$CFLAGS_OPT-Ofast "
else
	CFLAGS_OPT="$CFLAGS_OPT-O3 "
fi
if [ $FFAST_MATH_SUPPORTED_BY_CC = Y ]; then
	CFLAGS_OPT="$CFLAGS_OPT-ffast-math "
fi
if [ $PIPE_SUPPORTED_BY_CC = Y ]; then
	CFLAGS="$CFLAGS-pipe "
fi
if [ $FALIGN_LOOPS_SUPPORTED_BY_CC = Y ]; then
	CFLAGS_OPT="$CFLAGS_OPT-falign-loops=16 "
fi
if [ $FALIGN_FUNCTIONS_SUPPORTED_BY_CC = Y ]; then
	CFLAGS_OPT="$CFLAGS_OPT-falign-functions=16 "
fi
echo "Common $CC flags to be used: $CFLAGS"
echo "Common $CC optimization flags to be used: $CFLAGS_OPT"
echo "Common $CC debug flags to be used: $CFLAGS_DEBUG"
echo "CONFIG_CFLAGS=$CFLAGS" >> $OUTPUT_MAKEFILE
echo "CONFIG_CFLAGS_OPT=$CFLAGS_OPT" >> $OUTPUT_MAKEFILE
echo "CONFIG_CFLAGS_DEBUG=$CFLAGS_DEBUG" >> $OUTPUT_MAKEFILE
echo "CONFIG_CFLAGS_LINK=$CFLAGS_LINK" >> $OUTPUT_MAKEFILE
echo "CONFIG_CFLAGS_OPT_RELEASE=$CFLAGS_OPT_RELEASE" >> $OUTPUT_MAKEFILE
echo "#define XEMU_MAKE_ARCH native" >> $OUTPUT_HEADERFILE
echo "#define XEMU_MAKE_ARCH_NAME \"native\"" >> $OUTPUT_HEADERFILE
echo "#define _CONFIG_DATE \"`date`\"" >> $OUTPUT_HEADERFILE
echo "#define _CONFIG_OS \"`uname -a`\"" >> $OUTPUT_HEADERFILE


################################################################################################################
# Include Xemu's lowest level header, also using it (with preprocessor) to work out the target system's nature #
################################################################################################################


echo -n "Test for including xemu low level header ... "
cat > $SRC <<EOF
#include "xemu/arch-sys.h"
#include <stdio.h>

#ifdef	XEMU_ARCH_UNIX
#	define	IS_UNIX		"Y"
#else
#	define	IS_UNIX		"N"
#endif
#ifdef	XEMU_ARCH_WIN
#	define	IS_WIN		"Y"
#else
#	define	IS_WIN		"N"
#endif
#ifdef	XEMU_ARCH_WIN32
#	define	IS_WIN32	"Y"
#else
#	define	IS_WIN32	"N"
#endif
#ifdef	XEMU_ARCH_WIN64
#	define	IS_WIN64	"Y"
#else
#	define	IS_WIN64	"N"
#endif
#ifdef	XEMU_ARCH_OSX
#	define	IS_OSX		"Y"
#else
#	define	IS_OSX		"N"
#endif
#ifdef	XEMU_ARCH_LINUX
#	define	IS_LINUX	"Y"
#else
#	define	IS_LINUX	"N"
#endif
#ifdef	XEMU_ARCH_HTML
#	define	IS_HTML		"Y"
#else
#	define	IS_HTML		"N"
#endif

// Do *NOT* modify these (not even a single space!!!), the configure script will extract the result from this after running the C preprocessor!
const char *xemu_SYSTEM = XEMU_ARCH_NAME;
const char *xemu_IS_UNIX = IS_UNIX;
const char *xemu_IS_WIN = IS_WIN;
const char *xemu_IS_WIN32 = IS_WIN32;
const char *xemu_IS_WIN64 = IS_WIN64;
const char *xemu_IS_OSX	= IS_OSX;
const char *xemu_IS_LINUX = IS_LINUX;
const char *xemu_IS_HTML = IS_HTML;

int main ( void ) {
	// This is not used at all. Just for testing linkage to see if we have printf()
	printf("Your system is: %s\n", xemu_SYSTEM);
	return 0;
}
EOF
$CC $CFLAGS -o $OBJ -I. -c $SRC > $COUT 2> $CERR || failed
echo "OK"

echo -n "Test preprocessor function ... "
$CC $CFLAGS -E -I. -c $SRC > $COUT 2> $CERR || failed
echo "OK"

echo -n "Analyzing compilation target:"
for a in SYSTEM IS_UNIX IS_WIN IS_WIN32 IS_WIN64 IS_OSX IS_LINUX IS_HTML ; do
	echo -n " $a="
	b=`sed -n "s/^const char \*xemu_$a = \"//p" $COUT | cut -f1 -d'"'`
	echo -n $b
	if [ "$a" = "SYSTEM" ]; then
		if [ "$b" = "" ]; then
			echo "??"
			echo "Bad answer" >&2
			finalexit
		fi
	else
		if [ "$b" != "Y" -a "$b" != "N" ]; then
			echo "??"
			echo "Bad answer" >&2
			finalexit
		fi
	fi
	eval TARGET_$a=$b
done
echo


###############################
# Support for network sockets #
###############################


if [ $TARGET_IS_UNIX = Y ]; then
	# UNIX-kind systems should have socket API, also without any additional libraries involved
	echo "#define XEMU_HAS_SOCKET_API" >> $OUTPUT_HEADERFILE
	echo "SOCKET_LIBS =" >> $OUTPUT_MAKEFILE
elif [ $TARGET_IS_WIN = Y ]; then
	# Windows also has socket API (through winsock) but needs wsock32 to be linked against then
	echo "#define XEMU_HAS_SOCKET_API" >> $OUTPUT_HEADERFILE
	echo "SOCKET_LIBS = -lwsock32" >> $OUTPUT_MAKEFILE
else
	echo "SOCKET_LIBS =" >> $OUTPUT_MAKEFILE
fi
echo "SOCKET_CFLAGS =" >> $OUTPUT_MAKEFILE


#########################################
# SDL2: an essential component to have! #
#########################################


if [ $TARGET_IS_HTML = Y ]; then
	SDL2_CONFIG="emscripten-builtin"
	SDL2_CFLAGS="-s USE_SDL=2"
	SDL2_LIBS="-s USE_SDL=2"
else
	echo -n "Checking sdl2-config script as \"$SDL2_CONFIG\" ... "
	SDL2_VERSION="`$SDL2_CONFIG --version 2> $CERR`"
	r0=$?
	SDL2_PREFIX="`$SDL2_CONFIG --prefix 2> $CERR`"
	r1=$?
	SDL2_CFLAGS="`$SDL2_CONFIG --cflags 2> $CERR`"
	r2=$?
	SDL2_LIBS="`$SDL2_CONFIG --libs 2> $CERR`"
	r3=$?
	if [ \
		"$r0" = "0" -a "$r1" = "0" -a "$r2" = "0" -a "$r3" = "0" -a \
		"$SDL2_VERSION" != "" -a "$SDL2_PREFIX" != "" -a "$SDL2_CFLAGS" != "" -a "$SDL2_LIBS" != "" \
	]; then
		SDL2_CONFIG=$a
		echo "seems to work"
		echo "Detected SDL2 version ... $SDL2_VERSION"
	else
		echo "does NOT work, `cat $CERR`"
		finalexit
	fi
	if [ $TARGET_IS_WIN = Y ]; then
		if [ "$SDL2_DLL" = "" ]; then
			SDL2_DLL="$SDL2_PREFIX/bin/SDL2.dll"
		fi
		echo -n "Check if SDL2 DLL can be found as $SDL2_DLL ... "
		if [ -s $SDL2_DLL ]; then
			echo "OK"
		else
			echo "ERROR"
			echo "SDL2.dll cannot be found as expected" >&2
			finalexit
		fi
	else
		SDL2_DLL=""
	fi
fi
echo "#define XEMU_HAS_SDL2" >> $OUTPUT_HEADERFILE
echo "SDL2_CFLAGS=$SDL2_CFLAGS" >> $OUTPUT_MAKEFILE
echo "SDL2_LIBS=$SDL2_LIBS" >> $OUTPUT_MAKEFILE
echo "SDL2_DLL=$SDL2_DLL" >> $OUTPUT_MAKEFILE
SDL_REQVER0=2
SDL_REQVER1=0
SDL_REQVER2=4
cat >> $OUTPUT_HEADERFILE <<EOF
#define SDL_REQVER0 $SDL_REQVER0
#define SDL_REQVER1 $SDL_REQVER1
#define SDL_REQVER2 $SDL_REQVER2
EOF
echo -n "Trying to compile something against SDL2 ... "
cat > $SRC <<EOF
#include "$OUTPUT_HEADERFILE"
#include <SDL.h>
#if !SDL_VERSION_ATLEAST(SDL_REQVER0, SDL_REQVER1, SDL_REQVER2)
#	error "Your SDL seems to be too old! At least SDL2 version $SDL_REQVER0.$SDL_REQVER1.$SDL_REQVER2 is needed!"
#endif
int main ( int argc, char **argv ) {
	return SDL_Init(SDL_INIT_EVERYTHING);
}
EOF
exe="$CC $CFLAGS $SDL2_CFLAGS -o $OBJ -I. $SRC $SDL2_LIBS"
#echo $exe
$exe > $COUT 2> $CERR || failed
#$CC $CFLAGS $SDL2_CFLAGS -o $OBJ -I. $SRC $SDL2_LIBS > $COUT 2> $CERR || failed
echo "OK"

####################################
# PKG-CONFIG based optional stuffs #
####################################

# "READLINE:readline:#include <readline.h>:printf(\"%p\", readline(\"prompt\"))"
for a in \
	"GTK3:gtk+-3.0:#include <gtk/gtk.h>:gtk_init_check(NULL,NULL)"
do
	name="`echo $a | cut -f1 -d:`"
	id="`  echo $a | cut -f2 -d:`"
	glob="`echo $a | cut -f3 -d:`"
	inc="` echo $a | cut -f4 -d:`"
	if [ $name = GTK3 -a $PKG_CONFIG_GIVEN = N -a $TARGET_IS_OSX = Y ]; then
		echo "Skipping $name check with $PKG_CONFIG for OSX target, since no PKG_CONFIG was user forced."
		continue
	fi
	if [ $name = GTK3 -a $PKG_CONFIG_GIVEN = N -a $TARGET_IS_WIN = Y ]; then
		echo "Skipping $name check with $PKG_CONFIG for WIN targets, since no PKG_CONFIG was user forced. "
		continue
	fi
	if [ $TARGET_IS_HTML = Y ]; then
		echo "Skipping $name check with $PKG_CONFIG for HTML target"
		continue
	fi
	if [ $TARGET_IS_OSX = Y -a "$name" = "READLINE" ]; then
		# Override libreadline madness with Mac's internal libedit also called readline. Or WTF :-O
		# OSX is really an alien stuff .......
		echo -n "Overriding libreadline on Mac for system default ... "
		L1="-I/usr/include/readline"
		L2="-lreadline"
	else
		echo -n "Checking for $name (via $PKG_CONFIG [--cflags-only-I|--libs] $id) ... "
		"$PKG_CONFIG" --cflags-only-I $id > $COUT 2> $CERR
		ret=$?
		if [ "$ret" != "0" -o -s $CERR -o ! -s $COUT ]; then
			echo "NO"
			cat $CERR
			continue
		fi
		L1="`cat $COUT`"
		"$PKG_CONFIG" --libs $id > $COUT 2> $CERR
		ret=$?
		if [ "$ret" != "0" -o -s $CERR -o ! -s $COUT ]; then
			echo "NO"
			cat $CERR
			continue
		fi
		L2="`cat $COUT`"
	fi
	cat > $SRC <<EOF
#include <stdio.h>
$glob
int main ( void ) {
	$inc ;
	return 0;
}
EOF
	exe="$CC $CFLAGS $L1 -o $OBJ $SRC $L2"
	$exe > $COUT 2> $CERR
	ret=$?
	if [ "$ret" = "0" -a -s $OBJ ]; then
		echo "YES"
		#eval ${name}_CFLAGS="$L1"
		#eval ${name}_LIBS="$L2"
		eval HAS_${name}=Y
		eval ${name}_CFLAGS=\"$L1\"
		eval ${name}_LIBS=\"$L2\"
		echo "${name}_CFLAGS=$L1" >> $OUTPUT_MAKEFILE
		echo "${name}_LIBS=$L2" >> $OUTPUT_MAKEFILE
		echo "#define XEMU_HAS_$name" >> $OUTPUT_HEADERFILE
	else
		echo "NO"
		echo "!! Test compilation failed with $L1 $L2"
		cat $CERR
	fi
done


########################################################################################################
# libreadline seems to be problematic and does not use pkg-config and/or cannot be worked on macos ... #
########################################################################################################


cat > $SRC <<EOF
#include <stdio.h>
#include <readline/readline.h>
#include <readline/history.h>
int main ( void ) {
	char *p = readline(">");
	add_history(p);
	return 0;
}
EOF
echo -n "Checking libreadline usability ... "
$CC $SRC -o $OBJ -lreadline > $COUT 2> $CERR
ret=$?
if [ "$ret" = "0" -a -s $OBJ ]; then
	echo "OK"
	echo "READLINE_CFLAGS=" >> $OUTPUT_MAKEFILE
	echo "READLINE_LIBS=-lreadline" >> $OUTPUT_MAKEFILE
	echo "#define XEMU_HAS_READLINE" >> $OUTPUT_HEADERFILE
	HAS_READLINE=Y
else
	echo "NO"
fi


############################################
# Construct needed CFLAGS and LIBS for GUI #
############################################


XEMUGUI_CFLAGS=""
XEMUGUI_LIBS=""
if [ $TARGET_IS_OSX = Y ]; then
	XEMUGUI_LIBS="$XEMUGUI_LIBS-lobjc "
	echo "Enabling support for GUI [OSX] with LIBS: -lobjc"
fi
if [ "$HAS_GTK3" = "Y" ]; then
	XEMUGUI_CFLAGS="$XEMUGUI_CFLAGS$GTK3_CFLAGS "
	XEMUGUI_LIBS="$XEMUGUI_LIBS$GTK3_LIBS "
	echo "Enabling support for GUI [GTK+3] with CFLAGS: $GTK3_CFLAGS"
	echo "Enabling support for GUI [GTK+3] with LIBS: $GTK3_LIBS"
fi
echo "XEMUGUI_CFLAGS=$XEMUGUI_CFLAGS" >> $OUTPUT_MAKEFILE
echo "XEMUGUI_LIBS=$XEMUGUI_LIBS" >> $OUTPUT_MAKEFILE


#########################################
# Windows target: check windres utility #
#########################################

if [ $TARGET_IS_WIN = Y -a "$WINDRES" != "" ]; then
	cat > $SRC <<EOF
#include <winver.h>
1 VERSIONINFO
BEGIN
BLOCK "StringFileInfo"
BEGIN
BLOCK "040904E4"
BEGIN
VALUE "ProductName", "xemu"
END
END
END
EOF
	echo -n "Testing $WINDRES ... "
	$WINDRES $SRC -J rc -O coff -o $OBJ 2> $CERR || WINDRES=""
	if [ "$WINDRES" = "" ]; then
		echo "FAILED"
		cat $CERR >&2
	else
		echo "OK"
	fi
else
	WINDRES=
fi
echo "CONFIG_WINDRES=$WINDRES" >> $OUTPUT_MAKEFILE
if [ "$WINDRES" = "" ]; then
	echo "CONFIG_HAS_WINDRES=no" >> $OUTPUT_MAKEFILE
else
	echo "CONFIG_HAS_WINDRES=yes" >> $OUTPUT_MAKEFILE
fi


##############################################
# Math library ... needed for UNIX-kind OSes #
##############################################


if [ $TARGET_IS_UNIX = Y ]; then
	MATH_LIBS="-lm"
else
	MATH_LIBS=""
fi
echo "MATH_LIBS=$MATH_LIBS" >> $OUTPUT_MAKEFILE
echo "MATH_CFLAGS=" >> $OUTPUT_MAKEFILE


######################################################################## 
# Must be the end of this script, do not put anything after this part! #
########################################################################


cat >> $OUTPUT_HEADERFILE <<EOF
#ifndef XEMU_NO_TARGET
#	include "xemu-target.h"
#	if defined(XEMU_ARCH_HTML) && !defined(CONFIG_EMSCRIPTEN_OK)
#		error "Sorry, emscripten is not yet validated for this sub-project (CONFIG_EMSCRIPTEN_OK is not defined in xemu-target.h) ..."
#	endif
#endif
#undef XEMU_CONFIGURATION_PENDING
#define XEMU_CONFIGURATION_COMPLETED
EOF
echo "*** Configuration is done ***"
exit 0
